<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  <subtitle><![CDATA[Hexo is a fast, simple & powerful blog framework powered by Node.js.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hexo.io/"/>
  <updated>2014-09-06T14:45:03.838Z</updated>
  <id>http://hexo.io/</id>
  
  <author>
    <name><![CDATA[SkyArrow]]></name>
    <email><![CDATA[tommy351@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hexo 2.8 Released]]></title>
    <link href="http://hexo.io/news/2014/07/13/hexo-2-8-released/"/>
    <id>http://hexo.io/news/2014/07/13/hexo-2-8-released/</id>
    <published>2014-07-12T16:00:00.000Z</published>
    <updated>2014-07-13T14:41:33.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo 2.8 was rewritten, brings you better performance and many improvements. The following is the highlights in this version. You can check <a href="https://github.com/hexojs/hexo/releases/tag/2.8.0" target="_blank" rel="external">detail</a> on GitHub.</p>
<h2 id="Faster_Processing_Speed">Faster Processing Speed</h2>
<p>Before Hexo 2.8, all source files have to be processed each time you use Hexo. In Hexo 2.8, the entire database will be saved to <code>db.json</code> so Hexo don’t have to process all files again. Also, a new data type “<strong>skip</strong>“ was added for processors to detect whether a file was changed or not.</p>
<p>Generating was also changed in Hexo 2.8. You can check the elapsed time of each file in console now. However, I found multi-process generating didn’t affect generating speed a lot. Thus, <code>multi_thread</code> and <code>max_open_file</code> setting are deprecated in Hexo 2.8.</p>
<p><img src="/news/2014/07/13/hexo-2-8-released/generate-console.png" alt=""></p>
<h2 id="Draft_Publish">Draft Publish</h2>
<p>You don’t have to enter full file name to publish a post anymore. Draft publish system is rewritten in Hexo 2.8. <code>new_post_name</code> setting will be applied until drafts are published. Besides, you can choose which layout to apply when publishing.</p>
<figure class="highlight bash"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></figure>

<p>A new API <code>post.publish</code> was added to help you publish drafts more easily.</p>
<figure class="highlight js"><pre><div class="line">hexo.post.publish({slug: <span class="string">'hello-world'</span>, layout: <span class="string">'post'</span>}, <span class="function"><span class="keyword">function</span><span class="params">(err, target)</span></span>{</div><div class="line">  <span class="comment">// ...</span></div><div class="line">});</div></pre></figure>

<h2 id="Permalink">Permalink</h2>
<p>File name and permalink now share a more universal variable system. Every variables in file name can also be read in permalink. Here’s a config for example:</p>
<figure class="highlight yaml"><pre><div class="line"><span class="symbol">permalink:</span> <span class="symbol">:type/</span><span class="symbol">:title/</span></div><div class="line"><span class="symbol">new_post_name:</span> <span class="symbol">:type/</span><span class="symbol">:title</span>.md</div></pre></figure>

<p>When you create a post, the post will be saved to <code>source/_posts/test/Hello-World.md</code> and the URL will be <code>http://localhost:4000/test/Hello-World/</code>.</p>
<figure class="highlight bash"><pre><div class="line">$ hexo new <span class="string">"Hello World"</span> --type test</div></pre></figure>

<h2 id="Multi-language_Support">Multi-language Support</h2>
<p>With the new permalink introduced in the previous section, it’s much easier to create a multi-language site. For example:</p>
<figure class="highlight yaml"><pre><div class="line"><span class="symbol">permalink:</span> <span class="symbol">:lang/</span><span class="symbol">:title/</span></div><div class="line"><span class="symbol">new_post_name:</span> <span class="symbol">:lang/</span><span class="symbol">:title</span>.md</div></pre></figure>

<p>Then you can create a post with <code>--lang</code> option:</p>
<figure class="highlight bash"><pre><div class="line">$ hexo new <span class="string">"Hello World"</span> --lang en</div><div class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/en/Hello-World.md</span></div><div class="line"><span class="comment"># =&gt; URL: http://localhost:4000/en/Hello-World/</span></div><div class="line"></div><div class="line">$ hexo new <span class="string">"你好世界"</span> --lang tw</div><div class="line"><span class="comment"># =&gt; This post will be saved to source/_posts/tw/你好世界.md</span></div><div class="line"><span class="comment"># =&gt; URL: http://localhost:4000/tw/你好世界/</span></div></pre></figure>

<p>You can define the default value of permalink variables in <code>permalink_defaults</code> setting. For example, we define the defualt language as English.</p>
<figure class="highlight yaml"><pre><div class="line">permalink_default<span class="variable">s:</span></div><div class="line">  <span class="keyword">lan</span><span class="variable">g:</span> <span class="keyword">en</span></div></pre></figure>

]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 2.7 Released]]></title>
    <link href="http://hexo.io/news/2014/06/14/hexo-2-7-released/"/>
    <id>http://hexo.io/news/2014/06/14/hexo-2-7-released/</id>
    <published>2014-06-13T16:00:00.000Z</published>
    <updated>2014-07-06T08:01:15.000Z</updated>
    <content type="html"><![CDATA[<p>Hexo 2.7 has been released with three new features. I’m going to introduce them below.</p>
<h2 id="Fragment_Caching">Fragment Caching</h2>
<p>Although Hexo is fast, it may become slow if you have thousands of source files or complicated categories or tags. Before the data model upgraded, I borrowed a feature from Ruby on Rails: <strong>Fragment Caching</strong>.</p>
<p>Fragment Caching saves contents within a fragment and serves the cache when the next request come in. A fragment will only be processed once. It can reduce database queries and decrease generation time significantly. For instance, a Hexo site with 300+ source files needs 6 minutes to generate. In Hexo 2.7, it only need 10 seconds!</p>
<p>It can be used in header, footer, sidebar or static contents that won’t be changed during generating. For example:</p>
<figure class="highlight js"><pre><div class="line">&lt;%- fragment_cache(<span class="string">'header'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;header&gt;&lt;/header&gt;'</span>;</div><div class="line">}); %&gt;</div></pre></figure>

<p>By using <code>fragment_cache</code> helper, contents in the function will be cached.</p>
<p>Partial helper also supports Fragment Caching, you only need to add a <code>{cache: true}</code> option when using partial.</p>
<figure class="highlight js"><pre><div class="line">&lt;%- partial(<span class="string">'header'</span>, {}, {cache: <span class="literal">true</span>}) %&gt;</div></pre></figure>

<p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Landscape</a> is updated and supports Fragment Caching now. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d2aedda61571d6994eb72d784ceda2f59d2a8631" target="_blank" rel="external">this commit</a> to see what’s changed.</p>
<h2 id="Relative_Link">Relative Link</h2>
<p>Relative Link is supported since Hexo 2.7. But your theme needs some modifications to support it. However, it’s not as hard as you think. You just need to replace the following contents in templates</p>
<figure class="highlight js"><pre><div class="line">&lt;%- config.root %&gt;<span class="xml"><span class="vbscript">&lt;%- path %&gt;</span></span></div></pre></figure>

<p>with <code>url_for</code> helper.</p>
<figure class="highlight js"><pre><div class="line">&lt;%- url_for(path) %&gt;</div></pre></figure>

<p><code>url_for</code> helper will add <code>config.root</code> automatically for you. If you enable <code>relative_link</code> setting, it’ll add a relative path.</p>
<p><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Landscape</a> is updated for Relative Link. You can check <a href="https://github.com/hexojs/hexo-theme-landscape/commit/d29cbb83356373af27e7b98643f29a27804364af" target="_blank" rel="external">this commit</a> to see what’s changed.</p>
<h2 id="Server_Middleware">Server Middleware</h2>
<p>Server Middleware would be familiar if you have ever used <a href="http://www.senchalabs.org/connect/" target="_blank" rel="external">Connect</a> or <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> before. <a href="http://www.senchalabs.org/connect/" target="_blank" rel="external">Connect</a> passes a request through functions called <strong>middleware</strong>. You can make response to the coming in request in middleware.</p>
<p>In Hexo, middleware is served as a type of filter. You can add middleware by registering a new filter. For example:</p>
<figure class="highlight js"><pre><div class="line">hexo.extend.filter.register(<span class="string">'server_middleware'</span>, <span class="function"><span class="keyword">function</span><span class="params">(app)</span></span>{</div><div class="line">  app.use(<span class="function"><span class="keyword">function</span><span class="params">(req, res, next)</span></span>{</div><div class="line">    res.setHeader(<span class="string">'X-Powered-By'</span>, <span class="string">'Hexo'</span>);</div><div class="line">    next();</div><div class="line">  });</div><div class="line">});</div></pre></figure>

<p>This middleware add a header <code>X-Powered-By</code> and passes the request to the next middleware.</p>
]]></content>
    
    
  </entry>
  
</feed>
